name: Build casproxyserver

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y make g++ libpcsclite-dev pkgconf

      - name: Build yaml-cpp
        working-directory: thirdparty/yaml-cpp
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
          cmake --build build --config Release

      - name: Build project
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: 'latest'

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: msbuild msvc/casproxyserver.sln /p:Configuration=Release

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: make -j$(nproc)

      - name: Package release (Windows)
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir release
          copy .\msvc\x64\Release\casproxyserver.exe .\release\
          copy .\scripts\config.yaml .\release\
          $zipName = "casproxyserver-windows-x64-${{ github.ref_name }}.zip"
          powershell Compress-Archive -Path .\release\* -DestinationPath $zipName
          echo "ZIP_NAME=$zipName" >> $env:GITHUB_ENV

      - name: Upload release asset
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}